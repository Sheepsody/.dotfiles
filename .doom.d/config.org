#+TITLE: Dot-Emacs Configuration
#+AUTHOR: Victor Vialard
#+STARTUP: fold

#+begin_src elisp
;; Contant file location depending on working station
;; See example in local.el.template and copy to modify it
(load-file "~/.doom.d/local.el")
(mapc 'load (file-expand-wildcards "~/.doom.d/modules/*.el"))
#+end_src

* General
** Personal Informations

#+begin_src elisp
(setq user-full-name "Victor Vialard"
      user-mail-address "vvialard@hotmail.fr")
(setq auth-sources '("~/.authinfo"))
#+end_src

** Theme

#+begin_src elisp
;; Doom's theme
(setq current-theme 'doom-one-light)

(defun synchronize-theme ()
  (let* ((light-theme 'doom-one-light)
         (dark-theme 'doom-one)
         (start-time-light-theme 6)
         (end-time-light-theme 18)
         (hour (string-to-number (substring (current-time-string) 11 13)))
         (next-theme (if (member hour (number-sequence start-time-light-theme end-time-light-theme))
                         light-theme dark-theme)))
    (when (not (equal doom-theme next-theme))
      (setq doom-theme next-theme)
      (load-theme next-theme))))

(run-with-timer 0 900 'synchronize-theme)
#+end_src

#+begin_src elisp
(setq display-line-numbers-type 'relative)

;; Random
(setq random-splash-image-dir (concat "~/.doom.d/splash-images"))
(random-splash-image-set)
#+end_src

** Autocompletion

#+begin_src elisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 1)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort )) ;; make aborting less annoying.

(setq doom-modeline-enable-word-count nil)
#+end_src

** Language

#+begin_src elisp
(setq ispell-dictionary "en_GB")
#+end_src

** Bindings

#+begin_src elisp
;; Insert quotes for citations
(defun my/insert-quote ()
  (interactive)
  (insert "#+begin_quote\n«  »\n#+end_quote"))

(map! :leader
      :desc "Insert quote"
      "i q" #'my/insert-quote)

(map! :leader
      :desc "Structure Template"
      "i s" #'org-insert-structure-template)

(map! :leader
      :desc "Insert Reference"
      "i c" #'org-ref-helm-insert-cite-link)

(map! :leader
      :desc "Insert Reference"
      "o C" #'=calendar)
#+end_src

** Git

#+begin_src elisp
(global-git-gutter-mode +1)
#+end_src

** Dap Mode

#+begin_src elisp
;; Source: [[https://docs.doomemacs.org/latest/modules/tools/debugger/#keybindings,code-1--1][Doom emacs]]
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src

* Org-Mode
** Org

#+begin_src elisp
;; Org Directory
(setq org-image-actual-width '(600))
(custom-set-variables
 '(org-agenda-files (list
                     (concat org-directory "gtd/inbox.org")
                     (concat org-directory "gtd/habits.org")
                     (concat org-directory "gtd/calendar.org")
                     (concat org-directory "gtd/gtd.org"))))

(after! org
  :ensure t
  :config
  (setq org-id-extra-files (directory-files-recursively org-roam-directory "\.org$"))
  (setq org-archive-location (concat org-directory "archive.org::* FILE: %s"))
  (setq org-default-notes-file (concat org-directory "gtd/inbox.org"))
  (setq org-columns-default-format "%50ITEM(Task) %TODO %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM %TAGS")

  ;; Save org buggers periodically
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)

  ;; Inherit deadlines !
  (defun org-entry-properties-inherit-deadline (orig-fun &optional pom which)
    "Call ORIG-FUN with POM, but if WHICH is `DEADLINE' do it recursively."
    (if (string= which "SCHEDULED")
        (org-with-point-at pom
          (let (value)
            (while (not (or (setq value (funcall orig-fun (point) which))
                            (not (org-up-heading-safe)))))
            value)
          (funcall orig-fun pom which))))
  (advice-add 'org-entry-properties :around #'org-entry-properties-inherit-deadline)


  ;; Open pdf in emacs
  (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))

  ;; Capture templates
  (setq org-capture-templates
        `(
          ("t" "Todo [inbox]" entry
           (file ,(concat org-directory "gtd/inbox.org"))
           "* TODO %i%?")
          ("o" "One-Off [gtd]" entry
           (file+headline ,(concat org-directory "gtd/gtd.org") "One-Off")
           "* %^{Event status?|TODO|NEXT|WAITING|DONE } %i%?")
          ("c" "Org-protocol capture" entry
           (file ,(concat org-directory "gtd/inbox.org"))
           "* %a\n/Entered on:/ %U\n"
           :immediate-finish t)))

  ;; Keywords
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "MEETING(m)" "WAITING(w)" "HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("TODO"      :foreground "#46D9FF") ;; brightblue
          ("NEXT"      :foreground "#da8548") ;; brightred
          ("MEETING"   :foreground "#ECBE7B") ;; yellow
          ("WAITING"   :foreground "#c678dd") ;; brightmagenta
          ("HOLD"      :foreground "#a9a1e1") ;; magenta
          ("DONE"      :foreground "#98be65") ;; brightgreen
          ("CANCELLED" :foreground "#73797e") ;; gray
          )))

(defun my-org-summarize-task-status ()
  "Count number of tasks by status.
      Probably should make this a dblock someday."
  (interactive)
  (let (result)
    (org-map-entries
     (lambda ()
       (let ((todo (elt (org-heading-components) 2)))
         (if todo
             (if (assoc todo result)
                 (setcdr (assoc todo result)
                         (1+ (cdr (assoc todo result))))
               (setq result (cons (cons todo 1) result)))))))
    (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                             result " | "))))
;; Stylesheet for HTML exports
(setq org-html-head "<link rel=\"stylesheet\" href=\"https://rawgithub.com/edwardtufte/tufte-css/gh-pages/tufte.css\" type=\"text/css\" />")

;; PlantUML
(setq plantuml-default-exec-mode 'jar)

;; Org-Protocol
(server-start)
(require 'org-protocol)
#+end_src

#+begin_src elisp
;; Source : https://macowners.club/posts/org-capture-from-everywhere-macos/
;; Command : /usr/local/bin/emacsclient -ne "(timu-func-make-capture-frame)"
(defun timu-func-make-capture-frame ()
  "Create a new frame and run `org-capture'."
  (interactive)
  (make-frame '((name . "capture")
                (top . 300)
                (left . 700)
                (width . 80)
                (height . 25)))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))
#+end_src

** Org-Pomodoro

#+begin_src elisp
(use-package org-pomodoro
  :after org
  :ensure t
  :commands (org-pomodoro)
  :config
  (setq
   org-pomodoro-length 25
   org-pomodoro-short-break-length 5
   org-pomodoro-long-break-length 20
   org-pomodoro-play-sounds nil))

(defun my/emacs-query-pomodoro ()
  "Return the remaining pomodoro time"
  (if (org-pomodoro-active-p)
      (cl-case org-pomodoro-state
        (:pomodoro
         (format "Pomo: %d min \n---\n%s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
        (:short-break
         (format "Short break: %d min" (/ (org-pomodoro-remaining-seconds) 60)))
        (:long-break
         (format "Long break: %d min" (/ (org-pomodoro-remaining-seconds) 60)))
        (:overtime
         (format "Overtime! %d min" (/ (org-pomodoro-remaining-seconds) 60))))
    "No active pomo"))
#+end_src

#+begin_src elisp
;; Needs terminal-notifier (brew install terminal-notifier)
(defun notify-osx (title msg)
  (let ((notifier-path (executable-find "terminal-notifier")))
       (start-process
           "OSX Alert"
           "*OSX Alert*" ; use `nil` to not capture output; this captures output in background
           notifier-path
           "-message" msg
           "-title" title
           "-sender" "org.gnu.Emacs"
           "-activate" "org.gnu.Emacs")))

;; org-pomodoro mode hooks
(add-hook 'org-pomodoro-finished-hook
          (lambda ()
          (notify-osx "Pomodoro completed!" "Time for a break.")))

(add-hook 'org-pomodoro-break-finished-hook
          (lambda ()
          (notify-osx "Pomodoro Short Break Finished" "Ready for Another?")))

(add-hook 'org-pomodoro-long-break-finished-hook
          (lambda ()
            (notify-osx "Pomodoro Long Break Finished" "Ready for Another?")))

(add-hook 'org-pomodoro-killed-hook
          (lambda ()
          (notify-osx "Pomodoro Killed" "One does not simply kill a pomodoro!")))
#+end_src

** Org-Clock

#+begin_src elisp
;; Display time & Org Clock config
(display-time-mode 1)
(setq org-global-properties
      '(("Effort_ALL" .
         "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00"))
      org-clock-out-when-done t
      org-clock-out-remove-zero-time-clocks t)

;; Org-Clock export to csv
;; https://github.com/atheriel/org-clock-csv
(setq org-clock-csv-header "task,parents,category,start,end,duration,effort,ishabit,tags,itags"
      org-clock-csv-row-fmt (lambda (plist)
                              (mapconcat #'identity
                                         (list
                                          (org-clock-csv--escape (plist-get plist ':task))
                                          (org-clock-csv--escape (s-join org-clock-csv-headline-separator (plist-get plist ':parents)))
                                          (org-clock-csv--escape (plist-get plist ':category))
                                          (plist-get plist ':start)
                                          (plist-get plist ':end)
                                          (plist-get plist ':duration)
                                          (plist-get plist ':effort)
                                          (plist-get plist ':ishabit)
                                          (plist-get plist ':tags)
                                          (org-clock-csv--escape
                                           (org-clock-csv--read-property plist "ARCHIVE_ITAGS")))
                                         ",")))
#+end_src

** Org-Agenda

#+begin_src elisp
;; Org Super Agenda & Custom views
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-day nil ;; i.e. today
        org-agenda-span 1
        org-agenda-start-on-weekday nil)

  (setq org-agenda-custom-commands
        '(("z" "Custom GTD view"
           ((alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:scheduled future))
                            (:name "Habits"
                             :habit t
                             :tag "habit"
                             :order 11)
                            (:discard (:habit t))
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 25)
                            (:name "Immediatly"
                             :and (:priority "A" :todo "NEXT")
                             :order 2)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 3)
                            (:name "Due Today"
                             :deadline today
                             :order 4)
                            (:name "Important"
                             :tag "Important"
                             :priority "A"
                             :order 5)
                            (:name "Overdue"
                             :deadline past
                             :order 6)
                            (:name "Today"
                             :scheduled today
                             :order 7)
                            (:name "Org Journal"
                             :file-path "Journal/"
                             :order 8)
                            (:name "Due Soon"
                             :deadline future
                             :order 9)
                            (:name "Less important"
                             :priority "B"
                             :order 10)
                            (:name "Trivial"
                             :tag "trivial"
                             :priority<= "C"
                             :order 30)
                            (:name "Courses"
                             :tag "course"
                             :order 12)
                            (:name "To read"
                             :tag "read"
                             :order 13)
                            (:name "Shopping"
                             :tag "shop"
                             :order 14)
                            (:name "Courses"
                             :tag "course"
                             :order 15)
                            (:name "To do"
                             :todo "TODO"
                             :order 20)
                            ))))))))
  :config
  (org-super-agenda-mode))
#+end_src

** Org-Journal

#+begin_src elisp
(use-package! org-journal
  :after org
  :ensure t
  :config
  (setq org-journal-dir (concat org-directory "Journal/")
        org-journal-file-type 'weekly
        org-journal-date-prefix "* "
        org-journal-file-format "%Y-%W.org"
        org-journal-date-format "%A, %B %d %Y"
        org-journal-enable-agenda-integration t
        org-journal-file-header "#+TITLE: Weekly Journal\n#+SUBTITLE: Week %W, %B %Y\n#+STARTUP: folded\n\n")

  (setq org-journal-carryover-items
        (string-join
         '("TODO=\"TODO\""
           "TODO=\"NEXT\""
           "TODO=\"WAITING\""
           "TODO=\"HOLD\"")
         "|"))

  (defvar org-journal--date-location-scheduled-time nil)

  (defun org-journal-date-location (&optional scheduled-time)
    (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
      (setq org-journal--date-location-scheduled-time scheduled-time)
      (org-journal-new-entry t (org-time-string-to-time scheduled-time))
      (unless (eq org-journal-file-type 'daily)
        (org-narrow-to-subtree))
      (goto-char (point-max))))

  (defun my/refile (file headline)
    (let ((pos (function org-journal-find-location)))
      (org-refile nil nil (list headline file nil pos))))

  (add-to-list 'org-capture-templates
               `("j" "Journal entry" plain (function org-journal-date-location)
                 "** TODO %?\n SCHEDULED: <%(princ org-journal--date-location-scheduled-time)>\n"
                 :jump-to-captured t))
  (add-to-list 'org-capture-templates
               `("d" "Daily journal" plain (function org-journal-find-location)
                 (file ,(expand-file-name (concat org-directory "methodology/daily.org")))
                 :jump-to-captured t :immediate-finish t))
  (add-to-list 'org-capture-templates
               `("w" "Weekly review" plain (function org-journal-find-location)
                 (file ,(expand-file-name (concat org-directory "methodology/weekly.org")))
                 :jump-to-captured t :immediate-finish t))

  ;; My custom bindings
  (map! :leader
        (:prefix ("n j" . "Journal")
         :desc "New journal entry" "j" #'org-journal-new-entry
         :desc "New journal entry" "o" #'org-journal-open-current-journal-file
         :desc "Search journal entry" "s" #'org-journal-search)))
#+end_src

** Org-Roam

#+begin_src elisp
;; Org Roam

(setq org-roam-notes-path org-roam-directory)

(use-package! org-roam
  :ensure t
  :config
  (setq org-roam-graph-executable "neato")
  (setq org-roam-graph-extra-config
        '(("overlap" . "false")))

  (setq org-roam-capture-templates
        '(("p" "private" plain "%?"
           :if-new
           (file+head "%<%Y%m%d>-${slug}.org"
                      "${title}\n#+date: %t\n#+hugo_lastmod: %t\n#+filetags: private\n\n")
           :unnarrowed t)
          ("d" "draft" plain "%?"
           :if-new
           (file+head "%<%Y%m%d>-${slug}.org"
                      "${title}\n#+date: %t\n#+hugo_lastmod: %t\n#+filetags: draft\n\n")
           :unnarrowed t)
          ("r" "bibliography reference" plain
           "%?"
           :if-new
           (file+head "refs/${citekey}.org"
                      "${title}\n#+author: ${author-or-editor}\n#+year: ${year}\n#+hugo_lastmod: %t\n#+filetags: draft private")
           :unnarrowed t))))


(map! :leader
       :desc "Insert ORB note" "n r o" #'orb-insert-link)

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-follow 'nil
        org-roam-dailies-directory "daily/"
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

;; Org roam buffer
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))

;; Deft Configuration
;; Used for quick browsing of plain text notes
(use-package deft
  :after org
  :config
  (setq deft-default-extension "org"
        deft-directory org-roam-directory
        deft-use-filename-as-title t
        deft-recursive t))
#+end_src

** Ox-hugo

#+begin_src elisp
;; Org Roam Markdown Export
;; Inspired from https://github.com/alexkehayias/emacs.d/

(eval-when-compile
  (require 'cl))

(use-package ox-hugo
  :after org-roam
  :config
  (setq org-hugo-date-format "%Y-%m-%d")
  (setq org-hugo-base-dir "~/GitHub/MySecondBrainWebsite")
  :init
  ;; These functions need to be in :init otherwise they will not be
  ;; callable in an emacs --batch context which for some reason
  ;; can't be found in autoloads if it's under :config
  (defun my/org-roam--extract-note-body (file)
    (with-temp-buffer
      (insert-file-contents file)
      (org-mode)
      (first (org-element-map (org-element-parse-buffer) 'paragraph
               (lambda (paragraph)
                 (let ((begin (plist-get (first (cdr paragraph)) :begin))
                       (end (plist-get (first (cdr paragraph)) :end)))
                   (buffer-substring begin end)))))))
  ;; Include backlinks in org exported notes not tagged as private or
  ;; draft
  (defun my/org-roam--backlinks-list (id file)
    (--reduce-from
     (concat acc (format "- [[id:%s][%s]]\n"
                         (car it)
                         (org-roam-node-title (org-roam-node-from-id (car it)))
                         (my/org-roam--extract-note-body (org-roam-node-file (org-roam-node-from-id (car it))))))
     ""
     (org-roam-db-query
      (format
       ;; The percentage sign needs to be escaped twice because there
       ;; is two format calls—once here and the other by emacsql
       "SELECT id FROM (SELECT links.source AS id, group_concat(tags.tag) AS alltags FROM links LEFT OUTER JOIN tags ON links.source = tags.node_id WHERE links.type = '\"id\"' AND links.dest = '\"%s\"' GROUP BY links.source) Q  WHERE alltags IS NULL OR (','||alltags||',' NOT LIKE '%%%%,\"private\",%%%%' AND ','||alltags||',' NOT LIKE '%%%%,\"draft\",%%%%') "
       id))))

  (defun file-path-to-md-file-name (path)
    (let ((file-name (first (last (split-string path "/")))))
      (concat (first (split-string file-name "\\.")) ".md")))

  (defun file-path-to-slug (path)
    (let* ((file-name (car (last (split-string path "--"))))
           (title (first (split-string file-name "\\."))))
      (replace-regexp-in-string (regexp-quote "_") "-" title nil 'literal)))

  ;; Fetches all org-roam files and exports to hugo markdown
  ;; files. Adds in necessary hugo properties
  ;; e.g. HUGO_BASE_DIR. Ignores notes tagged as private or draft
  (defun org-roam-to-hugo-md ()
    (interactive)
    ;; Make sure the author is set
    (setq user-full-name "Victor Vialard")

    ;; Don't include any files tagged as private or
    ;; draft. The way we filter tags doesn't work nicely
    ;; with emacsql's DSL so just use a raw SQL query
    ;; for clarity
    (let ((notes (org-roam-db-query "SELECT id, file FROM (SELECT nodes.id, nodes.file, group_concat(tags.tag) AS alltags FROM nodes LEFT OUTER JOIN tags ON nodes.id = tags.node_id GROUP BY nodes.file)  WHERE alltags is null or (','||alltags||',' not like '%%,\"private\",%%' and ','||alltags||',' not like '%%,\"draft\",%%') ")))
      (-map
       (-lambda ((id file))
         ;; Use temporary buffer to prevent a buffer being opened for
         ;; each note file.
         (with-temp-buffer
           (message "Working on: %s" file)

           (insert-file-contents file)

           ;; Adding these tags must go after file content because it
           ;; will include a :PROPERTIES: drawer as of org-roam v2
           ;; which must be the first item on the page

           ;; Add in hugo tags for export. This lets you write the
           ;; notes without littering HUGO_* tags everywhere
           ;; HACK:
           ;; org-export-output-file-name doesn't play nicely with
           ;; temp buffers since it attempts to get the file name from
           ;; the buffer. Instead we explicitely add the name of the
           ;; exported .md file otherwise you would get prompted for
           ;; the output file name on every note.
           (goto-char (point-min))
           (re-search-forward ":END:")
           (newline)
           (insert
            (format "#+HUGO_BASE_DIR: %s\n#+HUGO_SECTION: ./posts\n#+EXPORT_FILE_NAME: %s\n"
                    org-hugo-base-dir
                    (file-path-to-md-file-name file)))


            (message (file-path-to-md-file-name file))

           ;; If this is a placeholder note (no content in the
           ;; body) then add default text. This makes it look ok when
           ;; showing note previews in the index and avoids a headline
           ;; followed by a headline in the note detail page.
           (if (eq (my/org-roam--extract-note-body file) nil)
               (progn
                 (goto-char (point-max))
                 (insert "\n/This note does not have a description yet./\n")))

           ;; Add in backlinks (at the end of the file) because
           ;; org-export-before-processing-hook won't be useful the
           ;; way we are using a temp buffer
           (let ((links (my/org-roam--backlinks-list id file)))
             (if (not (string= links ""))
                 (progn
                   (goto-char (point-max))
                   (insert (concat "\n* Links to this note\n") links))))

           (org-hugo-export-to-md)))
       notes)))

  (map! :leader
        :desc "Export Roam notes with Ox-Hugo"
        "n r h" #'org-roam-to-hugo-md))

;; Update timestamps automatically when saving !
(add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+hugo_lastmod: [ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M:%S\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src

** Citations

#+begin_src elisp
(use-package citeproc-org
  :ensure t
  :after ox-hugo
  :config
  (citeproc-org-setup))

(use-package! org-ref
  :after org
  :config
  (setq org-ref-bibliography-notes (concat org-roam-directory "refs/")
        org-ref-default-bibliography (list (concat org-roam-directory "references.bib"))))

(use-package! bibtex-completion
  :after org-ref
  :ensure t
  :init (autoload 'helm-bibtex "helm-bibtex" "" t)
  :config
  (setq bibtex-completion-pdf-field "file"
        bibtex-completion-bibliography (concat org-roam-directory "references.bib")
        bibtex-completion-notes-path (concat org-roam-directory "refs/"))

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
          (find-file pdf-file) ; original in org-ref-help,
                                        ; opens external viewer (org-open-file pdf-file)
        (message "No PDF found for %s" key))))
  (setq org-ref-open-pdf-function #'my/org-ref-open-pdf-at-point))

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref)
  (setq orb-preformat-keywords
        '("citekey" "title" "url" "author-or-editor" "keywords" "file" "year")
        orb-process-file-keyword t
        orb-file-field-extensions '("pdf")))

;; Tell org-ref to let helm-bibtex find notes for it
(setq org-ref-notes-function
      (lambda (thekey)
        (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
          (bibtex-completion-edit-notes
           (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
#+end_src

** Download

#+begin_src elisp
(use-package! org-download
  :after org
  :config

  (setq-default org-download-image-dir (concat org-roam-directory "images/org-download"))
  (setq org-download-method 'directory
        org-download-heading-lvl nil
        org-download-screenshot-method "screencapture -i %s"
        org-download-delete-image-after-download t
        org-download-timestamp "%Y%m%d-%H%M%S_"
        org-image-actual-width 300)

  (map! :map org-mode-map
        :localleader
        ("a c" #'org-download-screenshot)))
#+end_src

** Org Noter

#+begin_src elisp
;; Org-Noter config
(after! org-noter
  (setq
   org-noter-notes-search-path '(org-roam-directory)
   org-noter-hide-other nil
   org-noter-separate-notes-from-heading t
   org-noter-always-create-frame nil)
  (map!
   :map org-noter-doc-mode-map
   :leader
   :desc "Insert note"
   "m i" #'org-noter-insert-note
   :desc "Insert precise note"
   "m p" #'org-noter-insert-precise-note
   :desc "Go to previous note"
   "m k" #'org-noter-sync-prev-note
   :desc "Go to next note"
   "m j" #'org-noter-sync-next-note
   :desc "Create skeleton"
   "m s" #'org-noter-create-skeleton
   :desc "Kill session"
   "m q" #'org-noter-kill-session))
#+end_src

** Elfeed

#+begin_src elisp
;; ElFeed RSS reader
(use-package elfeed
  :defer t
  :config
  (setq elfeed-use-curl t))

(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org))

;; Elfeed star articles
;; See https://tecosaur.github.io/emacs-config/config.html#:~:text=4.4.%20Newsfeed-,%23,-RSS%20feeds%20are
(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))
(map! :map elfeed-search-mode-map
      :after elfeed-search
      :n "m" #'elfeed-toggle-star)

(defface star-elfeed-entry
  '((t (:foreground "#ECBE7B" :slant italic)))
  "title face in elfeed show buffer")
(push '(star star-elfeed-entry)
      elfeed-search-face-alist)
#+end_src

#+begin_src elisp
(defun my/export-opml ()
  "Exports Org-Elfeed config so it can be directly loaded into Android's RSS Reader"
  (interactive)

  ;; Replace selected symbols to predefined entities in XML
  (with-current-buffer (elfeed-org-export-opml)
    (widen)
    (let (
          ($findReplaceMap
           [
            ["&" "&amp;"]]
           ))
      (mapc
       (lambda ($x)
         (widen)
         (goto-char (point-min))
         (while (search-forward (elt $x 0) nil t)
           (replace-match (elt $x 1))))
       $findReplaceMap))

    ;; RSS Reader requires a text field
    (goto-char (point-min))
    (while (re-search-forward "title=\\(\"[^\"]*\"\\)" nil t)
      (replace-match "title=\\1 text=\\1"))

    ;; RSS Reader requires a type field
    (goto-char (point-min))
    (while (re-search-forward "xmlUrl" nil t)
      (replace-match "type=\"rss\" xmlUrl"))
    (write-file (concat org-directory "elfeed/elfeed.opml"))))
#+end_src

#+begin_src elisp
(map! :leader
      (:prefix-map ("e" . "elfeed")
       :desc "ElFeed" "e" #'elfeed
       :desc "Summary" "s" #'elfeed-summary
       :desc "Export OPML" "o" #'my/export-opml))
#+end_src
* Languages

#+begin_src elisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

** Rust

#+begin_src elisp
;; Rust configutation
(setq rustic-lsp-server 'rust-analyzer)
#+end_src

** TypeScript, JavaScript & CSS

#+begin_src elisp
;; Js/Ts/CSS config

(use-package prettier-js
  :config
  (setq prettier-js-args '(
                           "--trailing-comma" "es5"
                           "--single-quote" "true"
                           "--print-width" "120"
                           "--tab-width" "4"
                           "--use-tabs" "false"
                           "--jsx-bracket-same-line" "false"
                           "--stylelint-integration" "true"
                           )))

(use-package js2-mode)

(use-package rjsx-mode
  :mode(("\\.js\\'" . rjsx-mode)
        ("\\.jsx\\'" . rjsx-mode))
  :init
  (add-hook 'rjsx-mode-hook 'prettier-js-mode)
  (add-hook 'rjsx-mode-hook 'tide-mode))

(use-package tide
  :mode(("\\.ts\\'" . typescript-mode))
  :init
  (add-hook 'typescript-mode-hook 'tide-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  :config
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))
#+end_src

** Python

#+begin_src elisp
;; Python lsp
(setq lsp-log-io t)
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

;; Dap mode integration
(after! dap-mode
  (setq dap-python-debugger 'debugpy))

;; Numpy doc
(use-package numpydoc
  :ensure t
  :init
  (setq numpydoc-insertion-style 'yas)
  (map! :leader
        :desc "Generate numpy doc"
        "i d" #'numpydoc-generate))
#+end_src

** Clang

#+begin_src elisp
;; C++ Config
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

#+RESULTS:

* Other
** Kill process

#+begin_src elisp
;; Found on hacker news
;; Source: https://xenodium.com/emacs-quick-kill-process/
(defun dwim-shell-commands-kill-process ()
  "Select and kill process."
  (interactive)
  (let* ((pid-width 5)
         (comm-width 25)
         (user-width 10)
         (processes (proced-process-attributes))
         (candidates
          (mapcar (lambda (attributes)
                    (let* ((process (cdr attributes))
                           (pid (format (format "%%%ds" pid-width) (map-elt process 'pid)))
                           (user (format (format "%%-%ds" user-width)
                                         (truncate-string-to-width
                                          (map-elt process 'user) user-width nil nil t)))
                           (comm (format (format "%%-%ds" comm-width)
                                         (truncate-string-to-width
                                          (map-elt process 'comm) comm-width nil nil t)))
                           (args-width (- (window-width) (+ pid-width user-width comm-width 3)))
                           (args (map-elt process 'args)))
                      (cons (if args
                                (format "%s %s %s %s" pid user comm (truncate-string-to-width args args-width nil nil t))
                              (format "%s %s %s" pid user comm))
                            process)))
                  processes))
         (selection (map-elt candidates
                             (completing-read "kill process: "
                                              (seq-sort
                                               (lambda (p1 p2)
                                                 (string-lessp (nth 2 (split-string (string-trim (car p1))))
                                                               (nth 2 (split-string (string-trim (car p2))))))
                                               candidates) nil t)))
         (prompt-title (format "%s %s %s"
                               (map-elt selection 'pid)
                               (map-elt selection 'user)
                               (map-elt selection 'comm))))
    (when (y-or-n-p (format "Kill? %s" prompt-title))
      (dwim-shell-command-on-marked-files
       (format "Kill %s" prompt-title)
       (format "kill -9 %d" (map-elt selection 'pid))
       :utils "kill"
       :error-autofocus t
       :silent-success t))))
#+end_src

** Shell

#+begin_src elisp
(setenv "SHELL" "/bin/zsh")
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "/bin/zsh")
#+end_src

** Private Settings

#+begin_src elisp
(after! org
  (load! "private-config.el"))
#+end_src

** Unison syncing

[[https://www.cis.upenn.edu/~bcpierce/unison/][Unison]] is a two-way, platform agnostic tool that I use to sync my projects between my local machine and remote workers.

#+begin_src bash :tangle no
#!/bin/bash
while :
do
        if unison default -testserver; then
                unison default &&  :
        else
                echo "Could not connect to AWS"
        fi
    sleep 10
done
#+end_src

** Tridactyl (Vim-like firefox)

#+begin_src conf :tangle ~/.tridactylrc
set searchurls.julia https://www.google.com/search?q=site:http://docs.julialang.org/en/v1%20
set searchurls.so https://stackoverflow.com/search?q=
#+end_src

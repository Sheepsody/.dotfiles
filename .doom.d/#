#+TITLE: Dot-Emacs Configuration
#+AUTHOR: Victor Vialard
#+STARTUP: fold

* General
** Personal Informations

#+begin_src elisp
(setq user-full-name "Victor Vialard"
      user-mail-address "vvialard@hotmail.fr")
#+end_src

** Theme

#+begin_src elisp
;; Doom's theme
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)

;; Random
(load! "random-splash-image.el")
(setq random-splash-image-dir (concat "~/.doom.d/splash-images"))
(random-splash-image-set)
#+end_src

** Autocompletion

#+begin_src elisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 1)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort )) ;; make aborting less annoying.

(setq doom-modeline-enable-word-count nil)
#+end_src

** Language

#+begin_src elisp
(setq ispell-dictionary "en_GB")
#+end_src

** Bindings

#+begin_src elisp
;; Insert quotes for citations
(defun my/insert-quote ()
  (interactive)
  (insert "#+begin_quote\n«  »\n#+end_quote"))

(map! :leader
      :desc "Insert quote"
      "i q" #'my/insert-quote)

(map! :leader
      :desc "Structure Template"
      "i s" #'org-insert-structure-template)

(map! :leader
      :desc "Insert Reference"
      "i c" #'org-ref-helm-insert-cite-link)

(map! :leader
      :desc "Insert Reference"
      "o C" #'=calendar)
#+end_src

* Org-Mode
** Org

#+begin_src elisp
;; Org Directory
(setq org-directory (expand-file-name "~/Dropbox/emacs/Org/"))
(setq org-image-actual-width '(600))
(custom-set-variables
 '(org-agenda-files '("~/Dropbox/emacs/Org/inbox.org"
                      "~/Dropbox/emacs/Org/calendar.org"
                      "~/Dropbox/emacs/Org/gtd.org")))

(after! org
  :ensure t
  :config
  (setq org-archive-location "~/Dropbox/emacs/Org/archive.org::* FILE: %s")
  (setq org-default-notes-file (concat org-directory "inbox.org"))
  (setq org-columns-default-format "%50ITEM(Task) %TODO %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM %TAGS")

  ;; Save after toggle TODO state
  (add-hook 'org-trigger-hook 'save-buffer)

  ;; Capture templates
  (setq org-capture-templates
        '(("t" "Todo [inbox]" entry
           (file "~/Dropbox/emacs/Org/inbox.org")
           "* TODO %i%?")
          ("o" "One-Off [gtd]" entry
           (file+headline "~/Dropbox/emacs/Org/gtd.org" "One-Off")
           "* TODO %i%?")
          ("c" "Org-protocol capture" entry
           (file "~/Dropbox/emacs/Org/inbox.org")
           "* %a\n/Entered on:/ %U\n"
           :immediate-finish t)
          ("e" "Event" entry
           (file "~/Dropbox/emacs/Org/calendar.org")
           "* %^{Event status?||TODO |NEXT }%^{Title}\nSCHEDULED: %^t\n%?")))

  ;; Keywords
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "MEETING(m)" "WAITING(w)" "HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("TODO"      :foreground "#46D9FF") ;; brightblue
          ("NEXT"      :foreground "#da8548") ;; brightred
          ("MEETING"   :foreground "#ECBE7B") ;; yellow
          ("WAITING"   :foreground "#c678dd") ;; brightmagenta
          ("HOLD"      :foreground "#a9a1e1") ;; magenta
          ("DONE"      :foreground "#98be65") ;; brightgreen
          ("CANCELLED" :foreground "#73797e") ;; gray
          )))

;; Stylesheet for HTML exports
(setq org-html-head "<link rel=\"stylesheet\" href=\"https://rawgithub.com/edwardtufte/tufte-css/gh-pages/tufte.css\" type=\"text/css\" />")

;; Org-Protocol
(server-start)
(require 'org-protocol)
#+end_src

** Org-Pomodoro

#+begin_src elisp
(use-package org-pomodoro
  :after org
  :ensure t
  :commands (org-pomodoro)
  :config
  (setq
   org-pomodoro-length 25
   org-pomodoro-short-break-length 5
   org-pomodoro-long-break-length 20))

(defun my/emacs-query-pomodoro ()
  "Return the remaining pomodoro time"
  (if (org-pomodoro-active-p)
      (cl-case org-pomodoro-state
        (:pomodoro
         (format "Pomo: %d minutes - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
        (:short-break
         (format "Short break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
        (:long-break
         (format "Long break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
        (:overtime
         (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
    "No active pomo"))
#+end_src

** Org-Clock

#+begin_src elisp
;; Display time & Org Clock config
(display-time-mode 1)
(setq org-global-properties
      '(("Effort_ALL" .
         "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00"))
      org-clock-out-when-done t
      org-clock-out-remove-zero-time-clocks t)

;; Org-Clock export to csv
;; https://github.com/atheriel/org-clock-csv
(setq org-clock-csv-header "task,parents,category,start,end,duration,effort,ishabit,tags,itags"
      org-clock-csv-row-fmt (lambda (plist)
                              (mapconcat #'identity
                                         (list
                                          (org-clock-csv--escape (plist-get plist ':task))
                                          (org-clock-csv--escape (s-join org-clock-csv-headline-separator (plist-get plist ':parents)))
                                          (org-clock-csv--escape (plist-get plist ':category))
                                          (plist-get plist ':start)
                                          (plist-get plist ':end)
                                          (plist-get plist ':duration)
                                          (plist-get plist ':effort)
                                          (plist-get plist ':ishabit)
                                          (plist-get plist ':tags)
                                          (org-clock-csv--escape
                                           (org-clock-csv--read-property plist "ARCHIVE_ITAGS")))
                                         ",")))
#+end_src

** Org-Agenda

#+begin_src elisp
;; Org Super Agenda & Custom views
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-day nil ;; i.e. today
        org-agenda-span 1
        org-agenda-start-on-weekday nil)

  (setq org-agenda-custom-commands
        '(("z" "Custom GTD view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                            :discard (:tag ("daily" "weekly"))
                            :time-grid t
                            :date today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:name "Dailies"
                             :and (:tag "daily"
                                   :not (:scheduled future))
                             :order 9)
                            (:name "Weeklies"
                             :and (:tag "weekly"
                                   :not (:scheduled future))
                             :order 10)
                            (:discard (:tag ("daily" "weekly")))
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 25)

                            (:name "Immediatly"
                             :and (:priority "A" :todo "NEXT")
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Due Today"
                             :deadline today
                             :order 3)
                            (:name "Important"
                             :tag "Important"
                             :priority "A"
                             :order 4)
                            (:name "Overdue"
                             :deadline past
                             :order 5)
                            (:name "Due Soon"
                             :deadline future
                             :order 6)
                            (:name "Less important"
                             :priority "B"
                             :order 7)
                            (:name "Trivial"
                             :tag "trivial"
                             :priority<= "C"
                             :order 30)
                            (:name "Courses"
                             :tag "course"
                             :order 12)
                            (:name "To read"
                             :tag "read"
                             :order 13)
                            (:name "Shopping"
                             :tag "shop"
                             :order 14)
                            (:name "Courses"
                             :tag "course"
                             :order 15)
                            (:name "To do"
                             :todo "TODO"
                             :order 20)
                            ))))))))
  :config
  (org-super-agenda-mode))
#+end_src

** Org-Journal

#+begin_src elisp
(use-package! org-journal
  :after org
  :ensure t
  :config
  (setq org-journal-dir "~/Dropbox/emacs/Org/Journal/"
        org-journal-file-type 'weekly
        org-journal-date-prefix "* "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %B %d %Y"
        org-journal-enable-agenda-integration t
        org-journal-file-header "#+TITLE: Weekly Journal\n#+SUBTITLE: Week %U, %B %Y\n#+STARTUP: folded\n\n")
  (defun org-journal-find-location ()
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (defun my/refile (file headline)
    (let ((pos (function org-journal-find-location)))
      (org-refile nil nil (list headline file nil pos))))

  (add-to-list 'org-capture-templates
               `("j" "Journal entry" entry (function org-journal-find-location)
                 "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
                 :jump-to-captured t :immediate-finish t))
  (add-to-list 'org-capture-templates
               `("w" "Weekly review" entry (function org-journal-find-location)
                 (file ,(expand-file-name "~/Dropbox/emacs/Org/weekly.org"))
                 :jump-to-captured t :immediate-finish t)))
#+end_src

** Roam

#+begin_src elisp
;; Org Roam

(setq org-roam-publish-path "~/GitHub/MySecondBrainWebsite")
(setq org-roam-notes-path "~/Dropbox/emacs/Roam")

(use-package! org-roam
  :ensure t
  :custom
  (org-roam-directory "~/Dropbox/emacs/Roam/")
  :config
  (setq org-roam-graph-executable "neato")
  (setq org-roam-graph-extra-config
        '(("overlap" . "false")))
  :config
  (setq org-roam-capture-templates
        '(("p" "private" plain "%?"
           :if-new
           (file+head "%<%Y%m%d>-${slug}.org"
                      "#+TITLE: ${title}\n#+date: %t\n#+hugo_lastmod: %t\n#+filetags: private\n\n")
           :unnarrowed t)
          ("d" "draft" plain "%?"
           :if-new
           (file+head "%<%Y%m%d>-${slug}.org"
                      "#+TITLE: ${title}\n#+date: %t\n#+hugo_lastmod: %t\n#+filetags: draft\n\n")
           :unnarrowed t)
          ("r" "bibliography reference" plain
           "%?"
           :if-new
           (file+head "refs/${citekey}.org"
                      "#+title: ${title}\n#+author: ${author-or-editor}\n#+year: ${year}\n#+hugo_lastmod: %t\n#+filetags: draft private")
           :unnarrowed t))))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Deft

#+begin_src elisp
;; Deft Configuration
;; Used for quick browsing of plain text notes

(use-package deft
  :after org
  :config
  (setq deft-default-extension "org"
        deft-directory "~/Dropbox/emacs/Roam/"
        deft-use-filename-as-title t
        deft-recursive t))
#+end_src

** Ox-hugo

#+begin_src elisp
;; Org Roam Markdown Export
;; Inspired from https://github.com/alexkehayias/emacs.d/

(eval-when-compile
  (require 'cl))

(use-package ox-hugo
  :after org-roam
  :config
  (setq org-hugo-date-format "%Y-%m-%d")
  (setq org-hugo-base-dir "~/GitHub/MySecondBrainWebsite")
  :init
  ;; These functions need to be in :init otherwise they will not be
  ;; callable in an emacs --batch context which for some reason
  ;; can't be found in autoloads if it's under :config
  (defun my/org-roam--extract-note-body (file)
    (with-temp-buffer
      (insert-file-contents file)
      (org-mode)
      (first (org-element-map (org-element-parse-buffer) 'paragraph
               (lambda (paragraph)
                 (let ((begin (plist-get (first (cdr paragraph)) :begin))
                       (end (plist-get (first (cdr paragraph)) :end)))
                   (buffer-substring begin end)))))))
  ;; Include backlinks in org exported notes not tagged as private or
  ;; draft
  (defun my/org-roam--backlinks-list (id file)
    (--reduce-from
     (concat acc (format "- [[id:%s][%s]]\n#+begin_quote\n%s\n#+end_quote\n"
                         (car it)
                         (org-roam-node-title (org-roam-node-from-id (car it)))
                         (my/org-roam--extract-note-body (org-roam-node-file (org-roam-node-from-id (car it))))))
     ""
     (org-roam-db-query
      (format
       ;; The percentage sign needs to be escaped twice because there
       ;; is two format calls—once here and the other by emacsql
       "SELECT id FROM (SELECT links.source AS id, group_concat(tags.tag) AS alltags FROM links LEFT OUTER JOIN tags ON links.source = tags.node_id WHERE links.type = '\"id\"' AND links.dest = '\"%s\"' GROUP BY links.source) Q WHERE alltags IS NULL OR (','||alltags||',' NOT LIKE '%%%%,\"private\",%%%%' AND ','||alltags||',' NOT LIKE '%%%%,\"draft\",%%%%')"
       id))))

  (defun file-path-to-md-file-name (path)
    (let ((file-name (first (last (split-string path "/")))))
      (concat (first (split-string file-name "\\.")) ".md")))

  (defun file-path-to-slug (path)
    (let* ((file-name (car (last (split-string path "--"))))
           (title (first (split-string file-name "\\."))))
      (replace-regexp-in-string (regexp-quote "_") "-" title nil 'literal)))

  ;; Fetches all org-roam files and exports to hugo markdown
  ;; files. Adds in necessary hugo properties
  ;; e.g. HUGO_BASE_DIR. Ignores notes tagged as private or draft
  (defun org-roam-to-hugo-md ()
    (interactive)
    ;; Make sure the author is set
    (setq user-full-name "Victor Vialard")

    ;; Don't include any files tagged as private or
    ;; draft. The way we filter tags doesn't work nicely
    ;; with emacsql's DSL so just use a raw SQL query
    ;; for clarity
    (let ((notes (org-roam-db-query "SELECT id, file FROM (SELECT nodes.id, nodes.file, group_concat(tags.tag) AS alltags FROM nodes LEFT OUTER JOIN tags ON nodes.id = tags.node_id GROUP BY nodes.file) WHERE alltags is null or (','||alltags||',' not like '%%,\"private\",%%' and ','||alltags||',' not like '%%,\"draft\",%%')")))
      (-map
       (-lambda ((id file))
         ;; Use temporary buffer to prevent a buffer being opened for
         ;; each note file.
         (with-temp-buffer
           (message "Working on: %s" file)

           (insert-file-contents file)

           ;; Adding these tags must go after file content because it
           ;; will include a :PROPERTIES: drawer as of org-roam v2
           ;; which must be the first item on the page

           ;; Add in hugo tags for export. This lets you write the
           ;; notes without littering HUGO_* tags everywhere
           ;; HACK:
           ;; org-export-output-file-name doesn't play nicely with
           ;; temp buffers since it attempts to get the file name from
           ;; the buffer. Instead we explicitely add the name of the
           ;; exported .md file otherwise you would get prompted for
           ;; the output file name on every note.
           (goto-char (point-min))
           (re-search-forward ":END:")
           (newline)
           (insert
            (format "#+HUGO_BASE_DIR: %s\n#+HUGO_SECTION: ./posts\n#+EXPORT_FILE_NAME: %s\n"
                    org-roam-publish-path
                    (file-path-to-md-file-name file)))


            (message (file-path-to-md-file-name file))

           ;; If this is a placeholder note (no content in the
           ;; body) then add default text. This makes it look ok when
           ;; showing note previews in the index and avoids a headline
           ;; followed by a headline in the note detail page.
           (if (eq (my/org-roam--extract-note-body file) nil)
               (progn
                 (goto-char (point-max))
                 (insert "\n/This note does not have a description yet./\n")))

           ;; Add in backlinks (at the end of the file) because
           ;; org-export-before-processing-hook won't be useful the
           ;; way we are using a temp buffer
           (let ((links (my/org-roam--backlinks-list id file)))
             (if (not (string= links ""))
                 (progn
                   (goto-char (point-max))
                   (insert (concat "\n* Links to this note\n") links))))

           (org-hugo-export-to-md)))
       notes)))

  (map! :leader
        :desc "Export Roam notes with Ox-Hugo"
        "n r h" #'org-roam-to-hugo-md))

;; Update timestamps automatically when saving !
(add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+hugo_lastmod: [ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M:%S\]")
                           (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src

** Citations

#+begin_src elisp
(use-package citeproc-org
  :ensure t
  :after ox-hugo
  :config
  (citeproc-org-setup))


(use-package! org-ref
  :after org
  :config
  (setq org-ref-bibliography-notes "~/Dropbox/emacs/Roam/refs/"
        org-ref-default-bibliography '("~/Dropbox/emacs/Roam/references.bib")))

(use-package! bibtex-completion
  :after org-ref
  :ensure t
  :init (autoload 'helm-bibtex "helm-bibtex" "" t)
  :config
  (setq bibtex-completion-pdf-field "file"
        bibtex-completion-bibliography "~/Dropbox/emacs/Roam/references.bib"
        bibtex-completion-notes-path "~/Dropbox/emacs/Roam/refs/")

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
          (find-file pdf-file) ; original in org-ref-help,
                                        ; opens external viewer (org-open-file pdf-file)
        (message "No PDF found for %s" key))))
  (setq org-ref-open-pdf-function #'my/org-ref-open-pdf-at-point))

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref)
  (setq orb-preformat-keywords
        '("citekey" "title" "url" "author-or-editor" "keywords" "file" "year")
        orb-process-file-keyword t
        orb-file-field-extensions '("pdf")))

;; Tell org-ref to let helm-bibtex find notes for it
(setq org-ref-notes-function
      (lambda (thekey)
        (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
          (bibtex-completion-edit-notes
           (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
#+end_src

** Download

#+begin_src elisp
(after! org
  (setq org-download-method 'directory
        org-download-image-dir "~/Dropbox/emacs/Roam/images/org-download"
        org-download-heading-lvl nil
        org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width 300))
#+end_src

** Org Noter

#+begin_src elisp
;; Org-Noter config
(after! org-noter
  (setq
   org-noter-notes-search-path '("~/Dropbox/emacs/Roam/")
   org-noter-hide-other nil
   org-noter-separate-notes-from-heading t
   org-noter-always-create-frame nil)
  (map!
   :map org-noter-doc-mode-map
   :leader
   :desc "Insert note"
   "m i" #'org-noter-insert-note
   :desc "Insert precise note"
   "m p" #'org-noter-insert-precise-note
   :desc "Go to previous note"
   "m k" #'org-noter-sync-prev-note
   :desc "Go to next note"
   "m j" #'org-noter-sync-next-note
   :desc "Create skeleton"
   "m s" #'org-noter-create-skeleton
   :desc "Kill session"
   "m q" #'org-noter-kill-session))
#+end_src

* Languages
** Rust

#+begin_src elisp
;; Rust configutation
(setq rustic-lsp-server 'rust-analyzer)
#+end_src

** TypeScript, JavaScript & CSS

#+begin_src elisp
;; Js/Ts/CSS config

(use-package prettier-js
  :config
  (setq prettier-js-args '(
                           "--trailing-comma" "es5"
                           "--single-quote" "true"
                           "--print-width" "120"
                           "--tab-width" "4"
                           "--use-tabs" "false"
                           "--jsx-bracket-same-line" "false"
                           "--stylelint-integration" "true"
                           )))

(use-package js2-mode)

(use-package rjsx-mode
  :mode(("\\.js\\'" . rjsx-mode)
        ("\\.jsx\\'" . rjsx-mode))
  :init
  (add-hook 'rjsx-mode-hook 'prettier-js-mode)
  (add-hook 'rjsx-mode-hook 'tide-mode))

(use-package tide
  :mode(("\\.ts\\'" . typescript-mode))
  :init
  (add-hook 'typescript-mode-hook 'tide-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  :config
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))
#+end_src

** Python

#+begin_src elisp
;; Python Environnements

(use-package pyvenv
  :config
  (pyvenv-mode t)
  (setenv "WORKON_HOME" "~/.pyenv/versions")

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        #'(lambda ()
            (call-interactively #'lsp-workspace-restart)
            (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3"))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package lsp-mode
  :config
  (setq lsp-pyls-plugins-flake8-enabled t)
  (lsp-register-custom-settings
   '(("pyls.plugins.pyls_mypy.enabled" t t)
     ("pyls.plugins.pyls_mypy.live_mode" nil t)
     ("pyls.plugins.pyls_black.enabled" t t)
     ("pyls.plugins.pyls_isort.enabled" t t)))
  :hook
  ((python-mode . lsp)))
#+end_src

** Clang

#+begin_src elisp
;; C++ Config
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

#+RESULTS:

* Other
** Private Settings

#+begin_src elisp
(after! org
  (load! "private-config.el"))
#+end_src

** Elfeed

#+begin_src elisp
;; ElFeed RSS reader
(use-package! elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/Dropbox/emacs/Org/elfeed.org")))
#+end_src

#+begin_src elisp
(defun my/export-opml ()
  "Exports Org-Elfeed config so it can be directly loaded into Android's RSS Reader"
  (interactive)

  ;; Replace selected symbols to predefined entities in XML
  (with-current-buffer (elfeed-org-export-opml)
    (widen)
    (let (
          ($findReplaceMap
           [
            ["&" "&amp;"]]
           ))
      (mapc
       (lambda ($x)
         (widen)
         (goto-char (point-min))
         (while (search-forward (elt $x 0) nil t)
           (replace-match (elt $x 1))))
       $findReplaceMap))

    ;; RSS Reader requires a text field
    (goto-char (point-min))
    (while (re-search-forward "title=\\(\"[^\"]*\"\\)" nil t)
      (replace-match "title=\\1 text=\\1"))

    ;; RSS Reader requires a type field
    (goto-char (point-min))
    (while (re-search-forward "xmlUrl" nil t)
      (replace-match "type=\"rss\" xmlUrl"))
    (write-file (concat org-directory "elfeed.opml"))))
#+end_src

#+begin_src elisp
(map! :leader
      (:prefix-map ("e" . "elfeed")
       :desc "ElFeed" "e" #'elfeed
       :desc "Export OPML" "o" #'my/export-opml))
#+end_src
